---
import SunIcon from "./icons/Sun.astro"
import MoonIcon from "./icons/Moon.astro"
import SystemIcon from "./icons/System.astro"

const THEMES = ["Light", "Dark", "System"]
---

<div class="relative">
  <button
    id="theme-toggle-btn"
    class="inline-flex h-10 w-10 items-center justify-center rounded-full border border-slate-900/15 bg-white/80 text-slate-700 shadow-sm shadow-indigo-200/40 transition hover:border-emerald-400/60 hover:text-emerald-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-emerald-400 dark:border-white/10 dark:bg-slate-800/70 dark:text-slate-100 dark:shadow-black/50 dark:hover:border-emerald-400/40 dark:hover:text-emerald-300"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon id="light" class="theme-toggle-icon size-5 transition-all" />
    <MoonIcon id="dark" class="theme-toggle-icon absolute size-5 transition-all" />
    <SystemIcon id="system" class="theme-toggle-icon absolute size-5 transition-all" />
  </button>
  <div
    id="themes-menu"
    class="absolute hidden right-0 top-12 z-20 min-w-[9rem] rounded-xl border border-slate-900/10 bg-white/90 p-1.5 shadow-xl shadow-indigo-200/40 backdrop-blur-xl dark:border-white/10 dark:bg-slate-900/90 dark:shadow-black/50"
  >
    <ul class="flex flex-col gap-1">
      {
        THEMES.map((theme) => (
          <li
            class="themes-menu-option cursor-pointer rounded-lg px-3 py-2 text-xs font-medium uppercase tracking-[0.2em] text-slate-600/80 transition hover:bg-emerald-400/10 hover:text-emerald-600 dark:text-slate-200/80 dark:hover:bg-emerald-400/20 dark:hover:text-emerald-200"
          >
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu {
    transform-origin: top right;
  }

  #themes-menu.open {
    display: block;
    animation: scale-up-center 0.18s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: translateY(-0.35rem) scale(0.9);
      opacity: 0;
    }

    to {
      transform: translateY(0) scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  let remove = null
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)")
  const themesMenu = document.getElementById("themes-menu")

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "system"
    }

    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light"
  }

  const updateIcon = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
      element.style.scale = element.id === themePreference ? "1" : "0"
    })
  }

  const updateTheme = () => {
    if (remove != null) {
      remove()
    }
    matchMedia.addEventListener("change", updateTheme)
    remove = () => {
      matchMedia.removeEventListener("change", updateTheme)
    }

    const themePreference = getThemePreference()
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches)

    updateIcon(themePreference)
    document.documentElement.classList[isDark ? "add" : "remove"]("dark")
  }

  updateTheme()

  document.addEventListener("click", () => themesMenu.classList.remove("open"))

  document.getElementById("theme-toggle-btn").addEventListener("click", (e) => {
    e.stopPropagation()
    const isClosed = !themesMenu.classList.contains("open")
    themesMenu.classList[isClosed ? "add" : "remove"]("open")
  })

  document.querySelectorAll(".themes-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      localStorage.setItem("theme", e.target.innerText.toLowerCase().trim())
      updateTheme()
    })
  })
</script>
